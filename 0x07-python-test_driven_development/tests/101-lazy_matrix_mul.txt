# 101-lazy_matrix_mul.txt


Multiplying matrices using numpy
=================================

Usage
=====
Import module

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Multiplication with int

    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]
     [15 22]]

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[13 16]]

With floats

    >>> m_a = [
    ... [1.2, 5.5, 6.2],
    ... [4.66, 12.3, -9.2]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 34.69   55.44 ]
     [-78.61   29.018]]

With one argument

    >>> print(lazy_matrix_mul(m_a))
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

    >>> print(lazy_matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'

Unequal rows of m_a and comlumn m_b

    >>> m_a = [
    ... [8, 3],
    ... [3, 1],
    ... ]
    >>> m_b = [
    ... [1, 9],
    ... [4, 5],
    ... [8, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)


Empty array of argument

    >>> print(lazy_matrix_mul([[]], [[9, 2], [3, 3]]))
    Traceback (most recent call last):
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

    >>> print(lazy_matrix_mul([[2, 4], [4, 9]], [[]]))
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

Argument must be a list

    >>> print(lazy_matrix_mul("list1", [[5, 7]]))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> print(lazy_matrix_mul([[4, 9]], "my_list"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> print(lazy_matrix_mul("list", "list2"))
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> print(lazy_matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

No a list of list

    >>> print(lazy_matrix_mul([4, 1], [[9, 4]]))
    Traceback (most recent call last):
    ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

    >>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
    [11]

    >>> print(lazy_matrix_mul([1, 2], [3, 4]))
    11

Not a list of int

    >>> print(lazy_matrix_mul([[5, "hello"]], [[9, 2]]))
    Traceback (most recent call last):
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

    >>> print(lazy_matrix_mul([[5, 3], [9, 2]], [[5, "int"], [10, 3]]))
    Traceback (most recent call last):
    TypeError: invalid data type for einsum

    >>> print(lazy_matrix_mul([[1, "non-number"]], [[{"a": 1}, 8.8]]))
    Traceback (most recent call last):
    TypeError: Object arrays are not currently supported

Not equal rows in list args

    >>> m_a = [
    ... [5, 3],
    ... [9, 4, 5]
    ... ]
    >>> m_b = [
    ... [4, 7],
    ... [9, 2]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

    >>> m_a = [
    ... [4, 7],
    ... [9, 2]
    ... ]
    >>> m_b = [
    ... [5, 3],
    ... [9, 4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

    >>> m_a = [
    ... [5, 3],
    ... [9, 4, 5]
    ... ]
    >>> m_b = [
    ... [5, 3],
    ... [9, 4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.
