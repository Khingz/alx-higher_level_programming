# 100-matrix_mul.txt


A module that defined multiplication of 2 matrices

Usage
=====

Import module

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

With integers

    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[7, 10], [15, 22]]

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[13, 16]]

With floating points

    >>> m_a = [
    ... [1.2, 5.5, 6.2],
    ... [4.66, 12.3, -9.2]
    ... ]
    >>> m_b = [
    ... [5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]

With integers and floats combined

    >>> m_a = [
    ... [1, 2.2, 3.3, 4],
    ... [5, 6, 7, 8.8],
    ... ]
    >>> m_b = [
    ... [1.1, 2, 3.3],
    ... [4.0, 5.5, 6],
    ... [7, 8, 9],
    ... [10.01, 11, 12.3]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

Without arguments

    >>> print(matrix_mul())
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'

    >>> print(matrix_mul())
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'

Incorrect matrices

    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied


Empty list

    >>> print(matrix_mul([], [[1, 2]]))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

    >>> print(matrix_mul([[1, 2]], [[]]))
    Traceback (most recent call last):
    ValueError: m_b can't be empty

    >>> print(matrix_mul([[]], []))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

Not a list or list of list

    >>> print(matrix_mul("test string", [[9, 5]]))
    Traceback (most recent call last):
    ValueError: m_a must be a list

    >>> print(matrix_mul([[1, 2]], "my llist"))
    Traceback (most recent call last):
    ValueError: m_b must be a list

    >>> print(matrix_mul("hello", "world"))
    Traceback (most recent call last):
    ValueError: m_a must be a list

    >>> print(matrix_mul(None, None))
    Traceback (most recent call last):
    ValueError: m_a must be a list

    >>> print(matrix_mul([2, 21], [[3, 2]]))
    Traceback (most recent call last):
    ValueError: m_a must be a list of lists

    >>> print(matrix_mul([[8, 2]], [2, 9]))
    Traceback (most recent call last):
    ValueError: m_b must be a list of lists

    >>> print(matrix_mul([2, 9], [3, 3]))
    Traceback (most recent call last):
    ValueError: m_a must be a list of lists

List of list comtaining integera

    >>> print(matrix_mul([[4, "int"]], [[5, 3]]))
    Traceback (most recent call last):
    ValueError: m_a should contain only integers or floats

    >>> print(matrix_mul([[1, 2]], [[{"z": 1}, 2.5]]))
    Traceback (most recent call last):
    ValueError: m_b should contain only integers or floats

    >>> print(matrix_mul([[4, "hello"]], [[{"z": 1}, 2.5]]))
    Traceback (most recent call last):
    ValueError: m_a should contain only integers or floats

List with different row size

    >>> m_a = [
    ... [3, 2],
    ... [3, 4, 3]
    ... ]
    >>> m_b = [
    ... [9, 4],
    ... [2, 2]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

    >>> m_a = [
    ... [9, 4],
    ... [2, 2]
    ... ]
    >>> m_b = [
    ... [3, 2],
    ... [3, 4, 3]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size

    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
	m_b = [
    ... [2, 9],
    ... [6, 1, 5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size
